name: Sultan
permissions:
  contents: write  # Allow writing to repository contents (for pushing tags)
  actions: write   # Allows triggering actions

on:
  workflow_call: # This allows this workflow to be called from another workflow
    inputs:
      codename:
        required: true
        type: string
      repo:
        required: true
        type: string
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
      sub_level:
        required: true
        type: string
      os_patch_level:
        required: true
        type: string
  
jobs:
  build-kernel-sultan-kernelsu-susfs:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"

    steps:
      - name: Maximize Build Space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: 'true'          # Frees ~2 GB
          remove-android: 'true'         # Frees ~9 GB
          remove-haskell: 'true'         # Frees ~5.2 GB
          remove-codeql: 'true'          # Frees ~5.4 GB
          remove-docker-images: 'true'   # Frees ~3.2 GB
          remove-large-packages: 'true'  # Frees ~3.1 GB
          remove-swapfile: 'true'        # Frees ~4 GB
          remove-cached-tools: 'false'   # Avoid unless confirmed safe
          verbose: 'true'                # Enable detailed logging

      - name: Setup SWAP
        run: |
         sudo swapoff -a
         sudo fallocate -l 20G /swapfile
         sudo chmod 600 /swapfile
         sudo mkswap /swapfile
         sudo swapon -p 1 /swapfile
         echo 'vm.swappiness=1' | sudo tee -a /etc/sysctl.conf
         echo 'vm.vfs_cache_pressure=50' | sudo tee -a /etc/sysctl.conf
         echo 'vm.overcommit_memory=1' | sudo tee -a /etc/sysctl.conf
         sudo sysctl -p
         free -h
          
      - name: Set CONFIG Environment Variable
        run: |
          # Set CONFIG dynamically based on inputs values
          CONFIG="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}"

          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV

          echo "CONFIG set to: $CONFIG"

      - name: Install and configure dependencies
        run: |
          sudo apt-mark hold firefox
          sudo apt-mark hold libc-bin
          sudo apt-mark hold man-db
          sudo rm -rf /var/lib/man-db/auto-update
          sudo apt update
          sudo apt-get install -y --no-install-recommends \
           curl bison flex make binutils git perl gcc python3 \
           python-is-python3 bc libssl-dev libelf-dev \
           bc aria2 zip unzip ccache clang lld llvm
          # Verify ccache installation
          if ! command -v /usr/bin/ccache >/dev/null 2>&1; then
            echo "ccache installation failed"
            sudo apt-get install --reinstall ccache
            exit 1
          fi
          echo "ccache found at: $(/usr/bin/ccache --version)"

      - name: Configure ccache directory
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_${{ inputs.codename }}_${{ inputs.kernel_version }}.${{ inputs.sub_level }}" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=3G" >> $GITHUB_ENV
          echo "Current disk space:"
          df -h
          echo "Building kernel version: ${{ inputs.codename }} ${{ inputs.kernel_version }}.${{ inputs.sub_level }}"

      - name: Load current version kernel ccache cache
        uses: actions/cache@v3
        id: ccache-restore
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ inputs.codename }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ runner.os }}-main
          restore-keys: |
            ccache-${{ inputs.codename }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ runner.os }}-
            ccache-${{ inputs.codename }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-

      - name: Initialize and configure ccache
        run: |
          # Set ccache environment variables
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="${{ env.CCACHE_MAXSIZE }}"
          
          # Ensure ccache directory exists
          mkdir -p "$CCACHE_DIR"
          
          # Reconfigure cache size every run
          echo "Configuring ccache size to: $CCACHE_MAXSIZE"
          ccache -M "$CCACHE_MAXSIZE"
          ccache -o compression=true
          
          # Show initial cache state
          echo "Initial ccache state:"
          ccache -s
          
          # If cache restore hit, show detailed info
          if [ "${{ steps.ccache-restore.outputs.cache-hit }}" == 'true' ]; then
            echo "ccache cache hit details:"
            ccache -sv
          fi

      - name: Download toolchain
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-build-2024
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg

      - name: Set environment variables
        run: |
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV

      - name: Install Repo
        run: |
          mkdir -p ./git-repo
          echo "Downloading repo tool..."
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          ANYKERNEL_BRANCH="sultan-${{ inputs.codename }}"
          
          # Правильная логика определения ветки SUSFS
          # Android 15 официально использует ядро 6.6, но для Sultan kernels с 5.15 используем Android 14 ветку
          if [ "${{ inputs.android_version }}" == "android15" ] && [ "${{ inputs.kernel_version }}" == "5.15" ]; then
            SUSFS_BRANCH="gki-android14-5.15"
            echo "Using fallback SUSFS branch for Android 15 + kernel 5.15: $SUSFS_BRANCH"
          elif [ "${{ inputs.android_version }}" == "android15" ] && [ "${{ inputs.kernel_version }}" == "6.6" ]; then
            SUSFS_BRANCH="gki-android15-6.6"
            echo "Using Android 15 SUSFS branch for kernel 6.6: $SUSFS_BRANCH"
          else
            SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
            echo "Using standard SUSFS branch: $SUSFS_BRANCH"
          fi
          
          echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
          echo "Using branch for SUSFS: $SUSFS_BRANCH"
          
          # Проверяем существование ветки SUSFS перед клонированием
          if git ls-remote --exit-code --heads https://gitlab.com/simonpunk/susfs4ksu.git "$SUSFS_BRANCH" >/dev/null 2>&1; then
            echo "SUSFS branch $SUSFS_BRANCH exists, cloning..."
            git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          else
            echo "SUSFS branch $SUSFS_BRANCH not found, trying fallback options..."
            
            # Попробуем несколько fallback вариантов
            FALLBACK_BRANCHES=("gki-android14-5.15" "gki-android14-5.10" "gki-android13-5.15" "gki-android13-5.10")
            
            CLONED=false
            for fallback in "${FALLBACK_BRANCHES[@]}"; do
              if git ls-remote --exit-code --heads https://gitlab.com/simonpunk/susfs4ksu.git "$fallback" >/dev/null 2>&1; then
                echo "Using fallback SUSFS branch: $fallback"
                git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$fallback"
                CLONED=true
                break
              fi
            done
            
            if [ "$CLONED" = false ]; then
              echo "No suitable SUSFS branch found, cloning main branch..."
              git clone https://gitlab.com/simonpunk/susfs4ksu.git
            fi
          fi
          
          git clone https://github.com/TheFloresto/kernel_patches.git -b main
          git clone https://github.com/TheFloresto/AnyKernel3.git -b "$ANYKERNEL_BRANCH"

      - name: Initialize and Sync Kernel Source
        run: |
          echo "Creating folder for configuration: $CONFIG..."
          mkdir -p "$CONFIG"
          cd "$CONFIG"
          echo "Initializing and syncing kernel source..."
          
          # Determine the correct manifest branch based on codename
          if [ "${{ inputs.codename }}" == "gs101" ]; then
            MANIFEST_BRANCH="android-gs-pixel-5.10-android13-qpr3"
          elif [ "${{ inputs.codename }}" == "gs201" ]; then
            MANIFEST_BRANCH="android-gs-pixel-5.10-android14-qpr3"
          elif [ "${{ inputs.codename }}" == "zuma" ]; then
            MANIFEST_BRANCH="android-gs-pixel-5.15-android14-qpr3"
          elif [ "${{ inputs.codename }}" == "zumapro" ]; then
            MANIFEST_BRANCH="android-gs-pixel-5.15-android15"
          elif [ "${{ inputs.codename }}" == "sm7250" ]; then
            MANIFEST_BRANCH="android-msm-redbull-4.19-android12-qpr3"
          fi
          
          echo "Using manifest branch: $MANIFEST_BRANCH"
          $REPO init --depth=1 --u https://android.googlesource.com/kernel/manifest -b $MANIFEST_BRANCH --repo-rev=v2.16
          $REPO --version
          $REPO --trace sync -c -j$(nproc --all) --no-tags --fail-fast

      - name: Add KernelSU
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          # Navigate to the appropriate kernel directory based on codename
          if [ "${{ inputs.codename }}" == "sm7250" ]; then
            cd private/msm-google
          else
            cd private/gs-google
          fi
          
          echo "Adding KernelSU Next..."
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s next

      - name: Apply SUSFS Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Applying SUSFS patches..."
          
          # Copy SUSFS patches based on kernel structure
          if [ "${{ inputs.codename }}" == "sm7250" ]; then
            KERNEL_DIR="private/msm-google"
          else
            KERNEL_DIR="private/gs-google"
          fi
          
          # Определяем правильный SUSFS патч файл
          # Для Android 15 + kernel 5.15 используем Android 14 патчи
          if [ "${{ inputs.android_version }}" == "android15" ] && [ "${{ inputs.kernel_version }}" == "5.15" ]; then
            SUSFS_PATCH_NAME="50_add_susfs_in_gki-android14-5.15.patch"
            echo "Using fallback SUSFS patch: $SUSFS_PATCH_NAME"
          else
            SUSFS_PATCH_NAME="50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch"
            echo "Using standard SUSFS patch: $SUSFS_PATCH_NAME"
          fi
          
          # Copy SUSFS files
          cp ../susfs4ksu/kernel_patches/fs/* ./$KERNEL_DIR/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./$KERNEL_DIR/include/linux/

          cd ./$KERNEL_DIR/KernelSU-Next
          
          echo "Applying next SUSFS patches..."
          cp ../../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
          patch -p1 --forward < 10_enable_susfs_for_ksu.patch || true

          echo "Applying next SUSFS Fix patches..."
          cp ../../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_apk_sign.c.patch ./
          patch -p1 --forward < fix_apk_sign.c.patch
              
          cp ../../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_core_hook.c.patch ./
          patch -p1 --forward < fix_core_hook.c.patch
          
          cp ../../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_selinux.c.patch ./
          patch -p1 --forward < fix_selinux.c.patch
            
          cp ../../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_ksud.c.patch ./
          patch -p1 --forward < fix_ksud.c.patch

          cp ../../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_rules.c.patch ./
          patch -p1 --forward < fix_rules.c.patch

          cp ../../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_sucompat.c.patch ./
          patch -p1 --forward < fix_sucompat.c.patch

          cp ../../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_kernel_compat.c.patch ./
          patch -p1 --forward < fix_kernel_compat.c.patch
          
          # Apply SUSFS patch to kernel с проверкой существования
          cd ..
          if [ -f "../../susfs4ksu/kernel_patches/$SUSFS_PATCH_NAME" ]; then
            echo "Applying SUSFS patch: $SUSFS_PATCH_NAME"
            cp "../../susfs4ksu/kernel_patches/$SUSFS_PATCH_NAME" ./
            patch -p1 < "$SUSFS_PATCH_NAME" || true
          else
            echo "Warning: SUSFS patch $SUSFS_PATCH_NAME not found, skipping..."
          fi
          
          cp ../../kernel_patches/sultan/sys.c_fix.patch ./
          patch -p1 --fuzz=3 < sys.c_fix.patch

      - name: Apply KSU Hooks
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          if [ "${{ inputs.codename }}" == "sm7250" ]; then
            KERNEL_DIR="private/msm-google"
          else
            KERNEL_DIR="private/gs-google"
          fi
          
          cd ./$KERNEL_DIR
          # Apply additional patch
          cp ../../kernel_patches/next/syscall_hooks.patch ./
          patch -p1 -F 3 < syscall_hooks.patch
          
      - name: Apply Hide Stuff Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          if [ "${{ inputs.codename }}" == "sm7250" ]; then
            KERNEL_DIR="private/msm-google"
          else
            KERNEL_DIR="private/gs-google"
          fi
          
          cd ./$KERNEL_DIR
          # Apply additional patch
          cp ../../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch

      - name: Add SUSFS Configuration Settings
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          if [ "${{ inputs.codename }}" == "sm7250" ]; then
            KERNEL_DIR="private/msm-google"
            DEFCONFIG_PATH="arch/arm64/configs/redbull_defconfig"
          else
            KERNEL_DIR="private/gs-google"
            DEFCONFIG_PATH="arch/arm64/configs/${{ inputs.codename }}_defconfig"
          fi
          
          cd ./$KERNEL_DIR
          echo "Adding configuration settings to $DEFCONFIG_PATH..."

          # Add KSU configuration settings
          echo "CONFIG_KSU=y" >> ./$DEFCONFIG_PATH
          echo "CONFIG_KSU_KPROBES_HOOK=n" >> ./$DEFCONFIG_PATH
          
          # Add SUSFS configuration settings
          echo "CONFIG_KSU_SUSFS=y" >> ./$DEFCONFIG_PATH
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./$DEFCONFIG_PATH
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./$DEFCONFIG_PATH
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./$DEFCONFIG_PATH
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./$DEFCONFIG_PATH
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./$DEFCONFIG_PATH
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./$DEFCONFIG_PATH
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./$DEFCONFIG_PATH
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./$DEFCONFIG_PATH
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./$DEFCONFIG_PATH
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./$DEFCONFIG_PATH
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./$DEFCONFIG_PATH
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./$DEFCONFIG_PATH
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./$DEFCONFIG_PATH
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./$DEFCONFIG_PATH
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./$DEFCONFIG_PATH
          
          # Add additional tmpfs config setting
          echo "CONFIG_TMPFS_XATTR=y" >> ./$DEFCONFIG_PATH
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./$DEFCONFIG_PATH

          # Add additional config setting
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./$DEFCONFIG_PATH
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./$DEFCONFIG_PATH
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./$DEFCONFIG_PATH

          # Add BBR Config
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./$DEFCONFIG_PATH 
          echo "CONFIG_TCP_CONG_BBR=y" >> ./$DEFCONFIG_PATH
          echo "CONFIG_NET_SCH_FQ=y" >> ./$DEFCONFIG_PATH
          echo "CONFIG_TCP_CONG_BIC=n" >> ./$DEFCONFIG_PATH
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./$DEFCONFIG_PATH
          echo "CONFIG_TCP_CONG_HTCP=n" >> ./$DEFCONFIG_PATH
          
          # Performance and optimization configs
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> ./$DEFCONFIG_PATH
          echo "CONFIG_LTO_CLANG_FULL=y" >> ./$DEFCONFIG_PATH
          echo "CONFIG_LTO_CLANG_THIN=n" >> ./$DEFCONFIG_PATH

      - name: Change Kernel Name and Add Optimizations
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          if [ "${{ inputs.codename }}" == "sm7250" ]; then
            KERNEL_DIR="private/msm-google"
            DEFCONFIG_PATH="arch/arm64/configs/redbull_defconfig"
          else
            KERNEL_DIR="private/gs-google"
            DEFCONFIG_PATH="arch/arm64/configs/${{ inputs.codename }}_defconfig"
          fi
          
          cd ./$KERNEL_DIR
          
          # Get current date in the required format
          CURRENT_DATE=$(date -u +"%a %b %d %H:%M:%S UTC %Y")
          
          echo "Running sed and perl commands..."
          sed -i 's/CONFIG_LOCALVERSION="-Sultan"/CONFIG_LOCALVERSION="-@NoFloresto+@mr_vokintos"/' ./$DEFCONFIG_PATH
          
          # Remove -dirty suffix and set custom version
          perl -pi -e 's/-dirty//' ./scripts/setlocalversion
          sed -i '$s|echo "\$res"|echo "\$res-@NoFloresto+@mr_vokintos"|' ./scripts/setlocalversion
          
          # Set custom build timestamp
          perl -pi -e "s{UTS_VERSION=\"\\\$\(echo \\\$UTS_VERSION \\\$CONFIG_FLAGS \\\$TIMESTAMP \| cut -b -\\\$UTS_LEN\)\"}{UTS_VERSION=\"#1 SMP PREEMPT $CURRENT_DATE\"}" ./scripts/mkcompile_h

      - name: Build the Kernel
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          # Set ccache path in PATH
          export PATH="/usr/lib/ccache:/usr/bin:$PATH"
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="3G"
          /usr/bin/ccache -M "${{ env.CCACHE_MAXSIZE }}"
          /usr/bin/ccache -o compression=true
          /usr/bin/ccache -s
          
          echo "Building the kernel with optimizations..."
          
          # Clear unnecessary files to free space
          sudo rm -rf /usr/share/dotnet &
          sudo rm -rf /usr/local/lib/android &
          sudo rm -rf /opt/ghc &
          sudo rm -rf /opt/hostedtoolcache/CodeQL &
          
          # Build kernel using the appropriate build script
          if [ "${{ inputs.codename }}" == "sm7250" ]; then
            BUILD_CONFIG=private/msm-google/build.config.redbull
          else
            BUILD_CONFIG=private/gs-google/build.config.${{ inputs.codename }}
          fi
          
          # Set optimization flags based on codename
          if [ "${{ inputs.codename }}" == "zumapro" ]; then
            export KCFLAGS="-march=armv8.6-a -O3 --param=min-pagesize=0"
          elif [ "${{ inputs.codename }}" == "zuma" ]; then
            export KCFLAGS="-march=armv8.4-a -O3 --param=min-pagesize=0"
          elif [ "${{ inputs.codename }}" == "gs201" ]; then
            export KCFLAGS="-march=armv8.4-a -O3 --param=min-pagesize=0"
          elif [ "${{ inputs.codename }}" == "gs101" ]; then
            export KCFLAGS="-march=armv8.2-a -O3 --param=min-pagesize=0"
          elif [ "${{ inputs.codename }}" == "sm7250" ]; then
            export KCFLAGS="-march=armv8.2-a -O3 --param=min-pagesize=0"
          fi
          
          # Build with LTO and optimizations
          LTO=full BUILD_CONFIG=$BUILD_CONFIG build/build.sh CC="/usr/bin/ccache clang" HOSTCC="/usr/bin/ccache clang" || exit 1
          
          echo "Kernel compilation completed!"
          echo "ccache status:"
          ccache -s
          echo "Space after compilation:"
          df -h

      - name: Copy Images
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"

          echo "Copying Image.lz4 and concatenating DTB files..."
          cp ./out/${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}/dist/Image.lz4 ../AnyKernel3/Image.lz4
          
          if [ "${{ inputs.codename }}" == "gs101" ]; then
            cat ./out/${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}/dist/google-devices/gs101/dts/*.dtb > ../AnyKernel3/dtb
          elif [ "${{ inputs.codename }}" == "gs201" ]; then
            cat ./out/${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}/dist/google-devices/gs201/dts/*.dtb > ../AnyKernel3/dtb
          elif [ "${{ inputs.codename }}" == "zuma" ]; then
            cat ./out/${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}/dist/google-devices/zuma/dts/*.dtb > ../AnyKernel3/dtb
          elif [ "${{ inputs.codename }}" == "zumapro" ]; then
            cat ./out/${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}/dist/google-devices/zumapro/dts/*.dtb > ../AnyKernel3/dtb
          elif [ "${{ inputs.codename }}" == "sm7250" ]; then
            # For Pixel 5/5a (Snapdragon 765G) - different path structure
            cat ./out/${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}/dist/*.dtb > ../AnyKernel3/dtb
          fi

      - name: Create ZIP Files for Different Formats
        run: |
          echo "Navigating to AnyKernel3 directory..."
          cd ./AnyKernel3

          # Zip the files in the AnyKernel3 directory with a new naming convention
          ZIP_NAME="${{ inputs.codename }}_A15_Sultan_Next_SUSFS.zip"
          echo "Creating zip file $ZIP_NAME..."
          zip -r "../$ZIP_NAME" ./*
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ inputs.codename }}
          path: |
            *.zip
